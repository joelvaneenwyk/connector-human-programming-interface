[project]
# NOTE: 'my' is taken for PyPi already, and makes discovering the project impossible. so we're using HPI
name = "HPI"
version = "0.1.0"
description = "A Python interface to my life"
authors = [{ name = "Dmitrii Gerasimov", email = "karlicoss@gmail.com" }]
requires-python = ">=3.10"
dependencies = [
    "appdirs>=1.4.4",
    "click>=8.1.8",
    "decorator>=5.1.1",
    "google-takeout-parser>=0.1.12",
    "gpxpy>=1.6.2",
    "kompress>=0.2.20240918",
    "lxml>=5.3.0",
    "more-itertools>=10.5.0",
    "orgparse>=0.4.20231004",
    "pytz>=2024.2",
    "typing-extensions>=4.12.2",
    "orgparse", # for core.orgmode
    "gpxpy", # for hpi query --output gpx
    "cachew>=0.18.20241020",
    "ijson>=3.3.0",
    "uv>=0.5.14",
    "pdfannots",
]

[project.urls]
homepage = "https://github.com/karlicoss/HPI"
repository = "https://github.com/karlicoss/HPI"

[project.scripts]
hpi = "my.core.__main__:main"

[build-system]
requires = [
    "appdirs",                # very common, and makes it portable
    "click>=8.1",             # for the CLI, printing colors, decorator-based - may allow extensions to CLI
    "decorator",              # less pain in writing correct decorators. very mature and stable, so worth keeping in core
    "kompress>=0.2.20240918", # for transparent access to compressed files via pathlib.Path
    "more-itertools",         # it's just too useful and very common anyway
    "pytz",                   # even though it's not needed by the core, it"s so common anyway...
    "setuptools_scm",
    "setuptools>=42",
    "typing-extensions",      # one of the most common pypi packages, ok to depend for core
    "wheel",
    "orgparse",
]
build-backend = "setuptools.build_meta"

[project.readme]
file = "README.org"
content-type = "text/markdown"

[tool.setuptools]
zip-safe = false
py-modules = ["demo"]
license-files = ["LICENSE"]
include-package-data = true

[tool.setuptools.package-data]
"my" = ["py.typed"]

[tool.setuptools.packages.find]
where = ["."]
include = ["my.*"]

[tool.setuptools_scm]
local_scheme = "dirty-tag"

# todo eh? not sure if I should just rely on proper tag naming and use use_scm_version=True
#version_scheme = "python-simplified-semver"

[tool.uv]
managed = true
package = true
link-mode = "copy"

[tool.uv.pip]
universal = true

[tool.uv.sources]
hypexport = { git = "https://github.com/karlicoss/hypexport" }
pdfannots = { git = "https://github.com/0xabu/pdfannots" }

[dependency-groups]
dev = [
    "argparse>=1.4.0",
    "build>=1.2.2.post1",
    "cachew>=0.18.20241020",
    "colorlog>=6.9.0",
    "enlighten>=1.13.0",
    "hypexport",
    "isort>=5.13.2",
    "lxml>=5.3.0",
    "lxml-stubs>=0.5.1",
    "mypy>=1.14.1",
    "orjson>=3.10.13",
    "pandas>=2.2",
    "pandas-stubs>=2.2",
    "pyfzf-iter>=0.0.1",
    "pylint>=3.3.3",
    "pytest>=8.3.4",
    "ruff>=0.8.6",
    "setuptools>=75.7.0",
    "simplejson>=3.19.3",
    "tox>=4.23.2",
    "tox-uv>=1.17.0",
    "types-beautifulsoup4>=4.12.0.20241020",
    "types-colorama>=0.4.15.20240311",
    "types-dateparser>=1.2.0.20240420",
    "types-decorator>=5.1.8.20240310",
    "types-openpyxl>=3.1.5.20241225",
    "types-pillow>=10.2.0.20240822",
    "types-protobuf>=5.29.1.20241207",
    "types-pygments>=2.18.0.20240506",
    "types-python-dateutil>=2.9.0.20241206",
    "types-pytz>=2024.2.0.20241221",
    "types-simplejson>=3.19.0.20241221",
    "wheel>=0.45.1",
]
[project.optional-dependencies]
testing = [
    "pytest",
    "ruff",
    "mypy",
    "lxml",             # for mypy coverage
    "pandas",           # used in some tests.. although shouldn't rely on it
    "orjson",           # for my.core.serialize and denylist
    "simplejson",       # for my.core.serialize
    "types-pytz",       # for my.core
    "types-decorator",  # for my.core.compat
    "pandas-stubs",     # for my.core.pandas
    "types-dateparser", # for my.core.query_range
    "types-simplejson", # for my.core.serialize
]
optional = [
    "orjson",                # for my.core.serialize
    "pyfzf_iter",            # for my.core.denylist
    "cachew>=0.15.20231019",
    "mypy",                  # used for config checks
    "colorlog",              # for colored logs
    "enlighten",             # for CLI progress bars
]

[tool.mypy]
pretty = true
show_error_context = true
show_column_numbers = true
# show_error_end = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
strict_equality = true
enable_error_code = ["possibly-undefined"]

# todo ok, maybe it wasn't such a good idea..
# mainly because then tox picks it up and running against the user config, not the repository config
# mypy_path=~/.config/my

exclude = "doc/overlays/|misc/|my/"

# it's not controlled by me, so for now just ignore..
[[tool.mypy.overrides]]
module = "my.config.repos.pdfannots.pdfannots"
ignore_errors = true

[tool.pytest.ini_options]
python_files = "*.py"
addopts = [
    "-rap",
    "--verbose",
    "--continue-on-collection-errors",
    "--durations=0",
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
# Preserve types, even if a file imports `from __future__ import annotations`
# we need this for cachew to work with HPI types on 3.9
# can probably remove after 3.10?
pyupgrade.keep-runtime-typing = true
select = [
    "F", # flakes rules -- default, but extend just in case
    "E", # pycodestyle  -- default, but extend just in case
    "W", # various warnings

    "B",   # 'bugbear' set -- various possible bugs
    "C4",  # flake8-comprehensions -- unnecessary list/map/dict calls
    "COM", # trailing commas
    "EXE", # various checks wrt executable files
    # "I",    # sort imports
    "ICN",  # various import conventions
    "FBT",  # detect use of boolean arguments
    "FURB", # various rules
    "PERF", # various potential performance speedups
    "PD",   # pandas rules
    "PIE",  # 'misc' lints
    "PLC",  # pylint convention rules
    "PLR",  # pylint refactor rules
    "PLW",  # pylint warnings
    "PT",   # pytest stuff
    "PYI",  # various type hinting rules
    "RET",  # early returns
    "RUF",  # various ruff-specific rules
    "TID",  # various imports suggestions
    "TRY",  # various exception handling rules
    "UP",   # detect deprecated python stdlib stuff
    "FA",   # suggest using from __future__ import annotations
    "PTH",  # pathlib migration
    "ARG",  # unused argument checks
    # "A",   # builtin shadowing -- TODO handle later
    # "EM",  # TODO hmm could be helpful to prevent duplicate err msg in traceback.. but kinda annoying
]

ignore = [
    "D", # annoying nags about docstrings
    "N", # pep naming

    "UP007",
    "B905",

    # "TCH",   # type checking rules, mostly just suggests moving imports under TYPE_CHECKING
    "S",   # bandit (security checks) -- tends to be not very useful, lots of nitpicks
    "DTZ", # datetimes checks -- complaining about missing tz and mostly false positives
    "FIX", # complains about fixmes/todos -- annoying
    "TD",  # complains about todo formatting -- too annoying
    "ANN", # missing type annotations? seems way to strict though

    ### too opinionated style checks
    "E501", # too long lines
    "E702", # Multiple statements on one line (semicolon)
    "E731", # assigning lambda instead of using def
    "E741", # Ambiguous variable name: `l`
    "E742", # Ambiguous class name: `O
    "E401", # Multiple imports on one line
    "F403", # import *` used; unable to detect undefined names
    ###

    ###
    "E722", # Do not use bare `except` ## Sometimes it's useful for defensive imports and that sort of thing..
    "F811", # Redefinition of unused  # this gets in the way of pytest fixtures (e.g. in cachew)

    ## might be nice .. but later and I don't wanna make it strict
    "E402", # Module level import not at top of file

    ### maybe consider these soon
    # sometimes it's useful to give a variable a name even if we don't use it as a documentation
    # on the other hand, often is a sign of error
    "F841", # Local variable `count` is assigned to but never used
    ###

    "RUF100", # unused noqa -- handle later
    "RUF012", # mutable class attrs should be annotated with ClassVar... ugh pretty annoying for user configs

    ### these are just nitpicky, we usually know better
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0913", # too many function arguments
    "PLR0915", # too many statements
    "PLR1714", # consider merging multiple comparisons
    "PLR2044", # line with empty comment
    "PLR5501", # use elif instead of else if
    "PLR2004", # magic value in comparison -- super annoying in tests
    ###
    "PLR0402", # import X.Y as Y -- TODO maybe consider enabling it, but double check

    "B009", # calling gettattr with constant attribute -- this is useful to convince mypy
    "B010", # same as above, but setattr
    "B011", # complains about assert False
    "B017", # pytest.raises(Exception)
    "B023", # seems to result in false positives?
    "B028", # suggest using explicit stacklevel? TODO double check later, but not sure it's useful

    # complains about useless pass, but has sort of a false positive if the function has a docstring?
    # this is common for click entrypoints (e.g. in __main__), so disable
    "PIE790",

    # a bit too annoying, offers to convert for loops to list comprehension
    # , which may heart readability
    "PERF401",

    # suggests no using exception in for loops
    # we do use this technique a lot, plus in 3.11 happy path exception handling is "zero-cost"
    "PERF203",

    "RET504", # unnecessary assignment before returning -- that can be useful for readability
    "RET505", # unnecessary else after return -- can hurt readability

    "PLW0603", # global variable update.. we usually know why we are doing this
    "PLW2901", # for loop variable overwritten, usually this is intentional

    "PT011", # pytest raises should is too broad
    "PT012", # pytest raises should contain a single statement

    "COM812", # trailing comma missing -- mostly just being annoying with long multiline strings

    "PD901", # generic variable name df

    "TRY003", # suggests defining exception messages in exception class -- kinda annoying
    "TRY004", # prefer TypeError -- don't see the point
    "TRY201", # raise without specifying exception name -- sometimes hurts readability
    "TRY400", # TODO double check this, might be useful
    "TRY401", # redundant exception in logging.exception call? TODO double check, might result in excessive logging

    "PGH", # TODO force error code in mypy instead

    "TID252", # Prefer absolute imports over relative imports from parent modules

    "UP038", # suggests using | (union) in isisntance checks.. but it results in slower code

    ## too annoying
    "T20",    # just complains about prints and pprints
    "Q",      # flake quotes, too annoying
    "C90",    # some complexity checking
    "G004",   # logging statement uses f string
    "ERA001", # commented out code
    "SLF001", # private member accessed
    "BLE001", # do not catch 'blind' Exception
    "INP001", # complains about implicit namespace packages
    "SIM",    # some if statements crap
    "RSE102", # complains about missing parens in exceptions
    ##

    "ARG001", # ugh, kinda annoying when using pytest fixtures
    "F401",   # TODO nice to have, but annoying with NOT_HPI_MODULE thing
]
